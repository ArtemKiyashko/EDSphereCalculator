// <auto-generated />
using System;
using EdsmDbImporter;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EdsmDbImporter.Migrations
{
    [DbContext(typeof(EdsmDbContext))]
    [Migration("20200217153244_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBody", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("AbsoluteMagnitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<double?>("ArgOfPeriapsis")
                        .HasColumnType("double precision");

                    b.Property<string>("AtmosphereType")
                        .HasColumnType("text");

                    b.Property<double?>("AxialTilt")
                        .HasColumnType("double precision");

                    b.Property<int>("DistanceToArrival")
                        .HasColumnType("integer");

                    b.Property<double?>("EarthMasses")
                        .HasColumnType("double precision");

                    b.Property<long>("EdSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EdSystemId64")
                        .HasColumnType("bigint");

                    b.Property<string>("EdSystemName")
                        .HasColumnType("text");

                    b.Property<int?>("EdsmBodyId")
                        .HasColumnType("integer");

                    b.Property<long>("EdsmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EdsmId64")
                        .HasColumnType("bigint");

                    b.Property<double?>("Gravity")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsLandable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMainStar")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsScoopable")
                        .HasColumnType("boolean");

                    b.Property<string>("Luminosity")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("OrbitalEccentricity")
                        .HasColumnType("double precision");

                    b.Property<double?>("OrbitalInclination")
                        .HasColumnType("double precision");

                    b.Property<double?>("OrbitalPeriod")
                        .HasColumnType("double precision");

                    b.Property<double?>("Radius")
                        .HasColumnType("double precision");

                    b.Property<string>("ReserveLevel")
                        .HasColumnType("text");

                    b.Property<double?>("RotationalPeriod")
                        .HasColumnType("double precision");

                    b.Property<bool>("RotationalPeriodTidallyLocked")
                        .HasColumnType("boolean");

                    b.Property<double?>("SemiMajorAxis")
                        .HasColumnType("double precision");

                    b.Property<double?>("SolarMasses")
                        .HasColumnType("double precision");

                    b.Property<double?>("SolarRadius")
                        .HasColumnType("double precision");

                    b.Property<string>("SpectralClass")
                        .HasColumnType("text");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("SurfacePressure")
                        .HasColumnType("double precision");

                    b.Property<int?>("SurfaceTemperature")
                        .HasColumnType("integer");

                    b.Property<string>("TerraformingState")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VolcanismType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EdSystemId");

                    b.ToTable("CelestialBodies");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyAtmosphereComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodyAtmosphereCompositions");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyBelt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<long>("InnerRadius")
                        .HasColumnType("bigint");

                    b.Property<long>("Mass")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OuterRadius")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodyBelts");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodyMaterials");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyParent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodyParents");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyRing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<long>("InnerRadius")
                        .HasColumnType("bigint");

                    b.Property<long>("Mass")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OuterRadius")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodyRings");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodySolidComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("CelestialBodySolidCompositios");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.Distance", b =>
                {
                    b.Property<int>("DistanceFromId")
                        .HasColumnType("integer");

                    b.Property<int>("DistanceToId")
                        .HasColumnType("integer");

                    b.Property<long?>("DistanceFromId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistanceToId1")
                        .HasColumnType("bigint");

                    b.Property<double>("LightYears")
                        .HasColumnType("double precision");

                    b.HasKey("DistanceFromId", "DistanceToId");

                    b.HasIndex("DistanceFromId1");

                    b.HasIndex("DistanceToId1");

                    b.ToTable("Distances");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.EdSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CoordinatesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EdsmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EdsmId64")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatesId");

                    b.ToTable("EdSystems");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.EdSystemCoordinates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.Property<double>("Z")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("EdSystemCoordinates");
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBody", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.EdSystem", null)
                        .WithMany("Bodies")
                        .HasForeignKey("EdSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyAtmosphereComposition", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("BodyAtmosphereCompositions")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyBelt", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("Belts")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyMaterial", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("BodyMaterials")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyParent", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("BodyParents")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodyRing", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("Rings")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.CelestialBodySolidComposition", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.CelestialBody", "Body")
                        .WithMany("BodySolidCompositions")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.Distance", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.EdSystem", "DistanceFrom")
                        .WithMany("DistancesTo")
                        .HasForeignKey("DistanceFromId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EDSphereCalculator.CalculatorModels.EdSystem", "DistanceTo")
                        .WithMany("DistancesFrom")
                        .HasForeignKey("DistanceToId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EDSphereCalculator.CalculatorModels.EdSystem", b =>
                {
                    b.HasOne("EDSphereCalculator.CalculatorModels.EdSystemCoordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId");
                });
#pragma warning restore 612, 618
        }
    }
}
